@page
@using MercadoPago.Web.Pages
@model MercadoPago.Web.Pages.CartaoCreditoModel
@{
}

@section Styles
{
    <style>
        #form-checkout {
            display: flex;
            flex-direction: column;
            max-width: 600px;
        }

        .container {
            height: 18px;
            display: inline-block;
            border: 1px solid rgb(118, 118, 118);
            border-radius: 2px;
            padding: 1px 2px;
        }
    </style>
}

<h1>Cartão de crédito</h1>

<form id="form-checkout">
    @Html.AntiForgeryToken()
    Valor: @* <input type="text" id="form-checkout__amount" />
    <br /> *@
    Número Cartão: <div id="form-checkout__cardNumber" class="container"></div>
    Data expiração: <div id="form-checkout__expirationDate" class="container"></div>
    CVV: <div id="form-checkout__securityCode" class="container"></div>
    Nome cartão: <input type="text" id="form-checkout__cardholderName" />
    Bandeira: <select id="form-checkout__issuer"></select>
    Parcelas: <select id="form-checkout__installments"></select>
    Tipo documento: <select id="form-checkout__identificationType"></select>
    Número: <input type="text" id="form-checkout__identificationNumber" />
    E-mail: <input type="email" id="form-checkout__cardholderEmail" />

    <button type="submit" id="form-checkout__submit">Pagar</button>
    <progress value="0" class="progress-bar">Carregando...</progress>
</form>

@section Scripts
{
    <script>

        const mp = new MercadoPago("@Model.PublicKey");

        const cardForm = mp.cardForm({
          amount: "0.01",
          iframe: true,
          form: {
            id: "form-checkout",
            cardNumber: {
              id: "form-checkout__cardNumber",
              placeholder: "Número do cartão",
            },
            expirationDate: {
              id: "form-checkout__expirationDate",
              placeholder: "MM/YY",
            },
            securityCode: {
              id: "form-checkout__securityCode",
              placeholder: "Código de segurança",
            },
            cardholderName: {
              id: "form-checkout__cardholderName",
              placeholder: "Titular do cartão",
            },
            issuer: {
              id: "form-checkout__issuer",
              placeholder: "Banco emissor",
            },
            installments: {
              id: "form-checkout__installments",
              placeholder: "Parcelas",
            },
            identificationType: {
              id: "form-checkout__identificationType",
              placeholder: "Tipo de documento",
            },
            identificationNumber: {
              id: "form-checkout__identificationNumber",
              placeholder: "Número do documento",
            },
            cardholderEmail: {
              id: "form-checkout__cardholderEmail",
              placeholder: "E-mail",
            },
          },
          callbacks: {
            onFormMounted: error => {
              if (error) return console.warn("Form Mounted handling error: ", error);
              console.log("Form mounted");
            },
            onSubmit: event => {
              event.preventDefault();

              // let amount = document.getElementById('form-checkout__amount').value;

              const {
                paymentMethodId: payment_method_id,
                issuerId: issuer_id,
                cardholderEmail: email,
                amount,
                token,
                installments,
                identificationNumber,
                identificationType,
              } = cardForm.getCardFormData();

              const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

              //fetch("https://localhost:7099/api/pagamento/cartaoCredito", {
              fetch("?handler=CartaoCredito", {
                method: "POST",
                headers: {
                  'Content-Type': 'application/json',
                  'RequestVerificationToken': antiForgeryToken
                },
                body: JSON.stringify({
                  token,
                  issuerId: issuer_id,
                  paymentMethodId: payment_method_id,
                  transactionAmount: Number(amount),
                  installments: Number(installments),
                  description: "Descrição do produto",
                  payer: {
                    email,
                    identification: {
                      type: identificationType,
                      number: identificationNumber,
                    },
                  },
                }),
              });
            },
            onFetching: (resource) => {
              console.log("Fetching resource: ", resource);

              // Animate progress bar
              const progressBar = document.querySelector(".progress-bar");
              progressBar.removeAttribute("value");

              return () => {
                progressBar.setAttribute("value", "0");
              };
            }
          },
        });

    </script>
}